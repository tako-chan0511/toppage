環境構築　Vercel+supabase(PosgreSQL)
１．SuperbaseとVercel連携
　①アカウント作成：https://supabase.com
   Sing UpでGithubでOK
  →ログイン後ダッシュボートに入る
　　https://supabase.com/dashboard/
　②新規PJ作成
　　・ダッシュボードのNewProjectボタンをクリック
　　・Project Name（例：my-game.db）を入力
　　・Organization（個人の場合：Personal）、Region：日本
　　・Database passwordを設定
　　（後でDATABASE_URLを組み立てる時に使用、注意：@を使ったため→%40で変換必要だった）
　　・Start new projectを押下して作成
　③接続情報の取得
　　・プロジェクト画面に移動
　　・左メニューのProject Setting>Databaseを開く
　　・Connection string欄にあるURLをコピー（後で使う）
　　　例）postgres:/postgres:YOUR＿PASSWORD@db.YOUR_REGION.supabase.co:5432/postgres
  ④テーブルの準備
  　・左メニューのTable Editorを開き、New Table
  https://supabase.com/dashboard/project/fktghkvzcxuaoyoisbez/editor/17268
    ・テーブル名をpage_views、主キー列をgame(type:text)
    ・列を追加：count（type:int8,default:0）
    ・saveしてテーブルを作成
  
  ⑤Vercelに環境変数を登録
  https://vercel.com/keisukeharas-projects
  　・Vercelダッシュボードで該当プロジェクトを開く
  　・Settings＞Environment Variablesを選択
  　・下記設定（Kye-value）
  　　Key:SUPABASE_URL
  　　Value:https://YOUR_REGION.supabase.co
      Key:SUPABASE_KEY
      Value:
      　１．フロントから直接たたく：anon（コピーしたもの）を使う
      　２．サーバーレス関数などで信頼できるバックエンドからアクセス：service_roleのキー
      　　★今回は2番
      Key:DATABASE_URL（必要なら）
  　　Value:先ほどのConnection stringを張り付ける
  　⑥動作確認
  　　・ローカルで、vercel devを実行

  ーーーーーーーーーー再度まとめーーーーーーーーー
  Supabase と Vercel、Vue 3 をつなぎ合わせて「ページビュー／いいね数をクラウド DB に保存＆取得」
  するまでの全体手順を、環境設定や必要コマンドも含めて時系列順にまとめました。
  長くなりますが、順番に追っていけば再現できるはずです。

前提
すでに GitHub リポジトリ（例：toppage）を持っていて、そこに Vue 3 + Vite プロジェクトがある
Vercel アカウントを作成済み
Supabase アカウントを作成済み
以降のファイルパス・ドメイン名・キー値は自分の環境に読み替えてください。

[1]Supabase 側のセットアップ
1.1 Supabase ダッシュボードで新規プロジェクトを作成
https://app.supabase.com にログイン
“New project” →　Project name：好きな名前（例：toppage-stats）
Organization／Region を選択
Database password：任意（例：@tako123desu）
「Create new project」を押し、数分待つ

1.2 データベースのテーブル定義
プロジェクト画面の左メニューから Table Editor を開く
“New Table” ボタンを押し、下記スキーマでテーブルを作成
テーブル名：page_views
カラム：
　game – type: text (主キー)
　count – type: bigint (デフォルト 0)
　保存してテーブルを作成
　（必要に応じて）“New Table” で user_actions のような別テーブルを作る場合も同様に行う

1.3 Supabase の API 接続情報取得
左メニューの Settings > API を開く
“Project URL” 欄：https://<プロジェクトRef>.supabase.co という形式の URL をコピー
“Project API keys” 欄：
　anon public（クライアント向けキー）
　service_role（バックエンド向け／高権限キー）
　のどちらかをコピーしておく（今回はバックエンドから書き込みを行うので service_role 推奨）

1.4 Row Level Security (RLS) ポリシー確認
初期状態ではテーブルに対して RLS はオフになっているはずですが、もしオンになっていれば、
Table Editor > Policies から「Enable RLS」をオフ、または Insert/Update が許可されるよう
ルールを追加してください。

[2] ローカル開発環境の準備
以下の作業は、ターミナル（PowerShell など）を使って、
プロジェクトルート（package.json／vite.config.ts がある場所）で行ってください。

2.1 依存パッケージのインストール
# プロジェクトルートに移動
cd /path/to/toppage
# ① Supabase クライアント
npm install @supabase/supabase-js
# ② Axios（Vue から API を叩く用）
npm install axios
# ③ TypeScript 型定義（node, Vercel handler 用）
npm install --save-dev @types/node @vercel/node
# ④ gh-pages（GitHub Pages にデプロイする場合）
npm install --save-dev gh-pages

2.2 TypeScript 設定（もしまだなら）
プロジェクトルートに tsconfig.json を用意（すでにあれば不要）。以下は最低限の例です。
{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "jsx": "preserve",
    "sourceMap": true,
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "lib": ["esnext", "dom"],
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"] }
  },
  "include": ["src", "api"]
}

2.3 Vite 設定の確認
vite.config.ts（プロジェクトルート）を以下のように修正／用意しておきます。
開発（ローカル/Vercel Preview）: base: "/"
本番（GitHub Pages）: --base /toppage/ オプションで切り替え

// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'

export default defineConfig({
  base: "/",                // ローカル/Vercel Preview 用
  plugins: [vue()],
  resolve: {
    alias: { "@": path.resolve(__dirname, "src") }
  }
})

[3] vercel.json の作成
プロジェクトルートに vercel.json を置いて、Vercel CLI に「どのコマンドで起動するか」
「どこに関数があるか」を伝えます。必ずコメントや末尾カンマを入れず、
そのままの JSON として保存してください。

{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": { "distDir": "dist" }
    },
    {
      "src": "api/**/*.ts",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/$1.ts"
    },
    {
      "handle": "filesystem"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "devCommand": "npm run dev"
}

builds
 src: "package.json" → ビルドコマンドは npm run build（後述）
 src: "api/**/*.ts" → サーバレス関数は api/ フォルダー内の .ts ファイルを使う

routes
 /api/* は api/*.ts にルーティング
 静的ファイル → 存在チェック
 それ以外 → SPA の index.html

devCommand
 npm run dev を実行して Vite の開発サーバーを起動（vercel dev 実行時に使われる）

[4] 環境変数 (.env) の準備

4.1 Vercel CLI から Pull

# プロジェクトルートで
npx vercel env pull .env
これにより、Vercel ダッシュボードに登録されている以下の環境変数がローカルに .env として
コピーされます。

SUPABASE_URL : Supabase の Project URL (https://<ref>.supabase.co)
SUPABASE_KEY : Supabase の Service Role キー（または anon キー）
DATABASE_URL : PostgreSQL の接続文字列（Supabaseでは基本不要）
VERCEL_OIDC_TOKEN : Vercel 用の OIDC トークン（開発用・自動生成）

4.2 パスワードや特殊文字の URL エンコード

.env 内の DATABASE_URL に含むパスワードに @ や : がある場合は、必ず URL エンコード（例：@→%40）。

例：
DATABASE_URL="postgresql://postgres:%40tako123@db.fktghkvzcxuaoyoisbez.supabase.co:5432/postgres"
SUPABASE_URL="https://fktghkvzcxuaoyoisbez.supabase.co"
SUPABASE_KEY="（service_role キー）"

4.3 .env の確認
VSCode などで開き、下記３つを最低限持っていることを確かめます。

SUPABASE_URL="https://<your-ref>.supabase.co"
SUPABASE_KEY="<your-service-role-key>"
DATABASE_URL="postgresql://postgres:%40tako123@db.<your-ref>.supabase.co:5432/postgres"


[5] サーバレス関数の実装
5.1. api/track.ts （ページビューをカウントアップ）

// api/track.ts
import { createClient } from '@supabase/supabase-js';

// 環境変数を使って Supabase クライアントを初期化
const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

export default async function handler(req: any, res: any) {
  try {
    // クエリパラメータ game を取得
    const game = String(req.query.game || '');

    // 1) 現在の count を取得
    const { data, error: selErr } = await supabase
      .from('page_views')
      .select('count')
      .eq('game', game)
      .single();

    if (selErr && selErr.code !== 'PGRST116') {
      console.error('Select error:', selErr);
      return res.status(500).json({ error: selErr.message });
    }

    // 2) count を +1（存在しなければ 0 + 1）
    const newCount = (data?.count ?? 0) + 1;

    // 3) upsert で挿入または更新
    const { error: upErr } = await supabase
      .from('page_views')
      .upsert({ game, count: newCount }, { onConflict: 'game' });

    if (upErr) {
      console.error('Upsert error:', upErr);
      return res.status(500).json({ error: upErr.message });
    }

    return res.status(200).json({ ok: true });
  } catch (e: any) {
    console.error('Handler exception:', e);
    return res.status(500).json({ error: e.message });
  }
}

5.2. api/like.ts （いいねをカウントアップして新値を返す）

// api/like.ts
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_KEY!
);

export default async function handler(req: any, res: any) {
  try {
    const game = String(req.query.game || '');

    // 1) 現在の count を取得
    const { data, error: selErr } = await supabase
      .from('page_views')
      .select('count')
      .eq('game', game)
      .single();

    if (selErr && selErr.code !== 'PGRST116') {
      console.error('Select error:', selErr);
      return res.status(500).json({ error: selErr.message });
    }

    // 2) 新しい count を計算
    const current = data?.count ?? 0;
    const newCount = current + 1;

    // 3) upsert して新しい count を保存
    const { error: upErr } = await supabase
      .from('page_views')
      .upsert({ game, count: newCount }, { onConflict: 'game' });

    if (upErr) {
      console.error('Upsert error:', upErr);
      return res.status(500).json({ error: upErr.message });
    }

    // 4) フロントに新しい値を返す
    return res.status(200).json({ ok: true, count: newCount });
  } catch (e: any) {
    console.error('Handler exception:', e);
    return res.status(500).json({ error: e.message });
  }
}

ポイント
 req: any, res: any にして型のインポートを省略
 upsert({ game, count: newCount }, { onConflict: 'game' }) で存在チェック+更新

[6] Vue 3 コンポーネントの実装
6.1. GameStats.vue（アクセス数・いいね数を表示・更新するコンポーネントを作成）
src/components/GameStats.vue を新規作成し、以下を貼り付けます。

<template>
  <div class="stats">
    <!-- ページビュー数はトラッキング直後に再取得する場合は別エンドポイントが必要 -->
    <span>👁‍🗨 {{ views }}</span>
    <button @click="onLike">👍 {{ likes }}</button>
  </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue'
import axios from 'axios'

const props = defineProps<{ gameId: string }>()

const views = ref(0)
const likes = ref(0)

onMounted(async () => {
  // 1) ページビューをカウントアップする
  await axios.get('/api/track', { params: { game: props.gameId } })

  // 2) 最新のビュー数を取得するためのエンドポイント（get-count）を作っていれば以下のように取得
  // const { data } = await axios.get('/api/get-count', { params: { game: props.gameId } })
  // views.value = data.count

  // 今回は upsert 後に再フェッチしない場合、単に +1 表示しておく
  views.value++
})

async function onLike() {
  // クリックごとにいいねをカウントアップ
  const { data } = await axios.get('/api/like', { params: { game: props.gameId } })
  if (data.ok) {
    likes.value = data.count
  }
}
</script>

<style scoped>
.stats {
  display: flex;
  gap: 1rem;
  align-items: center;
  margin-top: 0.5rem;
}
button {
  background: none;
  border: none;
  cursor: pointer;
}
</style>

補足:
 今回は「ビュー数を upsert で更新したらローカルで views.value++」という簡易表示にしていますが、
 より正確に「最新値を取得したい」場合は /api/get-count のようなエンドポイントを用意し、
 select('count') を行ってくるのがおすすめです。

6.2. GameList.vue の更新
既存の src/components/GameList.vue に、先ほどの GameStats.vue を組み込みます。

<!-- src/components/GameList.vue -->
<template>
  <div class="game-list">
    <div
      v-for="game in games"
      :key="game.id"
      class="game-item"
    >
      <!-- 既存のゲーム情報を表示するコンポーネント -->
      <GameItem :game="game" />

      <!-- 追加：ページビュー&いいね数 -->
      <GameStats :gameId="game.id" />
    </div>
  </div>
</template>

<script lang="ts" setup>
import { defineProps } from 'vue'
import type { GameInfo } from '@/data/games'
import GameItem from '@/components/GameItem.vue'
import GameStats from '@/components/GameStats.vue'

const { games } = defineProps<{ games: GameInfo[] }>()
</script>

<style scoped>
.game-list {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding: 0;
  margin: 0;
}
.game-item {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  padding: 1rem;
  background: #fff;
  border-radius: 8px;
}
.game-item:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
}

/* レスポンシブ対応 */
@media (max-width: 1024px) {
  .game-list {
    grid-template-columns: repeat(3, 1fr);
  }
}
@media (max-width: 768px) {
  .game-list {
    grid-template-columns: repeat(2, 1fr);
  }
}
@media (max-width: 480px) {
  .game-list {
    grid-template-columns: 1fr;
  }
}
</style>

GameStats をインポートして <GameStats :gameId="game.id" /> を挿入することで、
各ゲームカードにカウントを表示します。

[7] Vue 3 本体のセットアップ
src/App.vue やルーター設定がまだという場合は、最低限以下を準備します。

7.1 src/App.vue（既存のまま使う）
既に作成済みならそのまま。例としては：

<template>
  <div id="app">
    <Header />
    <main>
      <GameList :games="games" />
    </main>
    <Footer />
  </div>
</template>

<script lang="ts" setup>
import Header from '@/components/Header.vue'
import Footer from '@/components/Footer.vue'
import GameList from '@/components/GameList.vue'
import { games } from '@/data/games'
</script>

<style>
main {
  padding: 2rem;
}
</style>

7.2. ルーターの設定（任意）
画面遷移が必要な場合は、vue-router を使って game/:id のようなルーティングを作ります。
今回は省略して、単一ページ内で GameStats を使う形でも問題ありません。

[8] GitHub Pages へのデプロイ設定（任意）
「GitHub Pages で静的ホスティング」も使いたい場合は以下を合わせておくと便利です。
※ Vercel に一本化したい場合はこのステップは不要です。

8.1 vite.config.ts のベース設定を切り替え
本番ビルド時だけ --base /toppage/ を渡して生成されるようにする。

8.2 package.json にデプロイスクリプトを追加

{
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",                                // Vercel/ローカル用
    "build:gh": "vue-tsc -b && vite build --base /toppage/",             // GitHub Pages 用
    "preview": "vite preview",
    "predeploy": "npm run build:gh",                                     // gh-pages デプロイ前に実行
    "deploy": "gh-pages -d dist"
  }
}


8.3 gh-pages ブランチへのデプロイ
 npm run deploy

これで gh-pages ブランチに dist/ の中身が自動で push され、
https://<GitHubユーザー名>.github.io/toppage/ で公開される

[9] ローカル開発と動作確認
9.1 ローカルで vercel dev を実行 → Vite 開発サーバー＆API が同時起動
 npx vercel dev

ログに Functions served from api/ と Static files served from dist/ が出れば OK
ブラウザで http://localhost:3000/ を開くと Vue アプリが立ち上がる

9.2 API テスト（PowerShell／ターミナル）
# ページビューを 1 増加
curl http://localhost:3000/api/track?game=test-page

# いいねを 1 増加し、新値を JSON で返す
curl http://localhost:3000/api/like?game=test-page

9.3 Supabase でテーブルを確認
https://app.supabase.com → 該当プロジェクト → Table Editor → page_views
game='test-page' のレコードがあり、count が増えているか見る

9.4 Vue アプリ上から動作確認
ブラウザで http://localhost:3000/ を開き、
各ゲームカードの下に 👁‍🗨（ページビュー数）と 👍（いいね数）が表示されていること

「👍」をクリックするとカウントが増えて数値が更新されること

[10] Vercel にリモートデプロイ
10.1 変更を Git コミット & GitHub へプッシュ

 git add .
 git commit -m "Add Supabase/Vercel integration and GameStats component"
 git push origin <your-branch>

10.2 Vercel ダッシュボードから Preview／Production を確認
 Vercel が自動検出してプレビューを作成
 (Production を更新する場合は main ブランチにマージ)
 ブラウザでプレビュー URL を開き、ローカルと同じように 👁‍🗨 と 👍 が動作するか確認

[11] コマンドリストまとめ
# 1. プロジェクトルートへ移動
 cd /path/to/toppage
# 2. 依存インストール
 npm install @supabase/supabase-js axios
 npm install --save-dev @types/node @vercel/node gh-pages
# 3. 環境変数の Pull（Vercel に登録済みの値を .env に取り込む）
 npx vercel env pull .env
# 4. Vercel ローカル開発サーバー起動
 npx vercel dev
# 5. API エンドポイントの動作テスト
 curl http://localhost:3000/api/track?game=test-page
 curl http://localhost:3000/api/like?game=test-page
# （必要あれば）6. GitHub Pages への静的サイトデプロイ
 npm run deploy
# 7. Git でコミット・プッシュ
 git add .
 git commit -m "Integrate Supabase + Vercel + Vue3"
 git push origin <your-branch>
 
 以上が一連の流れです。

  Supabase：テーブル作成・環境変数取得
  ローカル開発：.env 作成 → vercel dev で Vite/Vercel Functions 起動 → 
   curl で動作確認 → Supabase で値をチェック
  Vue 3：GameStats.vue を作り、GameList.vue に組み込む
  Vercel：vercel.json を用意 → GitHub Push で自動デプロイ
  GitHub Pages（必要な場合）：npm run deploy で静的ホスティング

この手順を順番に実行すれば、ローカル開発からクラウド連携、本番公開までスムーズに動作するはずです。
ご参考になれば幸いです。


--------------------------------

今回のポイントをざっくりおさらい
1.vite.config.ts でポートを固定しない

// 悪い例: port: 5173 とハードコードしてしまうと、vercel dev と衝突する
server: {
  port: 5173,
  strictPort: true,
  //…
}
// ↓
// 良い例: process.env.PORT があればそれを優先して使い、なければ 5173
server: {
  port: Number(process.env.PORT) || 5173,
  strictPort: true,
}
これにより、
単独で npm run dev → フロントは 5173 で起動

npx vercel dev（または npx vercel dev --listen 3000）→ Vercel Dev が渡す PORT=3000 を受けて、フロントも 3000 で起動し、API へのルーティングは自動的に Functions 側へ委譲
というフローが成り立つようになります。

ローカルでの動作確認手順
端末A で npm run dev を走らせ→ http://localhost:5173 でフロントが表示されることを確認
端末B で npx vercel dev --listen 3000 を走らせ→ http://localhost:3000/api/get-count?... などで API が動いていることを確認
この両者がそれぞれ正常に動くとわかったら、改めて 端末A で npx vercel dev を一発で起動し→ http://localhost:3000 で「フロント＋API」がまとめて起動することを確かめる

CORS／import-analysis 周りの微調整
assetsInclude: ['**/*.html'] を設定しておくことで、Vite が index.html をアセットとして正しく扱い、
import-analysis エラーや 500 エラーを防ぎます。

フロントからの /api/... リクエストはすべて VITE_API_BASE（開発環境時は http://localhost:3000）を先頭に付けることで、
Axios の呼び出し先が正しく Functions に届くようになります。

今回の一連の修正によって、ローカルでは「5173: フロント」「3000: API」がそれぞれ正常に動作し、さらに npx vercel dev を一発で叩いても両者がぶつからずに共存できるようになっています。

次にやること
本番環境向けにデプロイ
GitHub などにコミット＆プッシュして、Vercel の Production 環境にマージすれば、自動的にビルド＆デプロイが始まります。
本番では VITE_API_BASE は不要（Functions への相対パス /api/... が自動的に正しい場所を指します）。
環境変数（SUPABASE_URL と SUPABASE_KEY）は Vercel のダッシュボードから本番用にも設定しておきましょう。

動作確認
デプロイ完了後、公開URL（例： https://<your-project>.vercel.app）にブラウザでアクセスし、
フロント側の UI が正しく表示される
ページ読み込み時にビュー数がカウントアップされる

いいねボタンを押すと Supabase 上の値が＋1 され、画面にも反映される
という流れを念のためチェックしてください。

必要に応じた調整
追加したいゲームがあれば src/data/games.ts に追記して、ビルドを回してみる

デザインや UI の細かい調整
Supabase 側で認証リレーションを追加したい・レポートを見たいなどがあれば、そのあたりを拡張
もし本番デプロイ後や別のフェーズで問題や質問が出てきたら、またお知らせください。お疲れさまでした！

★


