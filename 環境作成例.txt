GoogleAnalytics（GA4）でデータ収集

■ストリームの詳細
ストリーム名：ゲームハブ
ストリーム URL：https://tako-chan0511.github.io/toppage/
ストリーム ID：11279822421
測定 ID：G-SGMW5NBTHC

■Googleタグ情報
このタグをコピーして、ウェブサイトのすべてのページのコード（<head> 要素の直後）に貼り付けます。各ページに複数の Google タグを実装することはできません。

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SGMW5NBTHC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SGMW5NBTHC', { send_page_view: true });
</script>

■toppage以外の各ゲームのリンクのアクセスについて

クリックイベントでカスタムイベントを送信する
たとえば <GameItem> コンポーネント内のリンク部分を次のように書き換えます。

<!-- src/components/GameItem.vue -->
<template>
  <div class="game-item">
    <h2>{{ game.title }}</h2>
    <p class="description">{{ game.description }}</p>
    <div class="links">
      <!-- Play リンク -->
      <a
        :href="game.url"
        target="_blank"
        rel="noopener"
        @click.prevent="trackAndGo(game.url)"
      >
        ▶ Play
      </a>
      <!-- Demo リンク -->
      <a
        v-if="game.demoUrl"
        :href="game.demoUrl"
        target="_blank"
        rel="noopener"
        @click.prevent="trackAndGo(game.demoUrl!)"
      >
        📺 Demo
      </a>
      <!-- Repo リンク -->
      <a
        v-if="game.repo"
        :href="`https://github.com/${game.repo}`"
        target="_blank"
        rel="noopener"
        @click.prevent="trackAndGo(`https://github.com/${game.repo}`)"
      >
        📂 Repo
      </a>
    </div>
  </div>
</template>

<script lang="ts" setup>
import type { GameInfo } from '@/data/games'
import { defineProps } from 'vue'

// props から直接 game を受け取る
const { game } = defineProps<{ game: GameInfo }>()

/**
 * 外部リンククリックを GA4 に送信してから遷移する
 * transport_type: 'beacon' と event_callback で送信完了後に開き、
 * タイムアウト保険も入れておく
 */
function trackAndGo(url: string) {
  if (typeof gtag === 'function') {
    gtag('event', 'outbound_click', {
      event_category: 'Game Hub',
      event_label: url,
      transport_type: 'beacon',
      event_callback: () => {
        window.open(url, '_blank')
      }
    })
    // タイムアウト保険：500ms後に飛ばす
    setTimeout(() => {
      window.open(url, '_blank')
    }, 500)
  } else {
    // gtag がなければそのまま開く
    window.open(url, '_blank')
  }
}
</script>

<style scoped>
.game-item {
  padding: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: #fff;
  margin-bottom: 1rem;
}
.links a {
  margin-right: 0.5rem;
  color: #42b983;
  text-decoration: none;
}
.links a:hover {
  text-decoration: underline;
}
/* 説明文はデフォルト白文字 */
.description {
  color: #fff;
}
/* モバイル（幅480px以下）では読みやすいダークテキストに */
@media (max-width: 480px) {
  .game-item .description {
    color: #222 !important;
  }
}
</style>

ポイント解説

<a> に @click.prevent を付与し、デフォルトのリンク遷移を一旦止めます。

gtag('event', 'outbound_click', …) でカスタムイベントを送信し、event_callback でコールバックを受け取った後に window.open で遷移します。

transport_type: 'beacon' により、ブラウザがバックグラウンドで確実にリクエストを送信します。

万が一コールバックが来ない場合に備え、500ms 経過後にも window.open するタイムアウト保険を設定しています。

これで、GA4 の「イベント」→「outbound_click」で、event_label に各 URL が記録され、クリック数が把握できるようになります。


